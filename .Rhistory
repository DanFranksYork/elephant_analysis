encounters_per_t = n_agents,
mean_neighbors = 10,
n_zealots=15,
zealot_opinion=0,
external_opinion=1,
external_prob=0.1) {
pop <- initialize_pop(n_agents)
if(n_zealots > 0)
pop <- seed_zealots(n_zealots,zealot_opinion,n_agents,pop)
network_density <- mean_neighbors/n_agents
net <- erdos.renyi.game(n_agents,network_density)
#net <- make_lattice(length=sqrt(n_agents),dim=2,nei=1)
opinion_m <- matrix(data=rep(0,n_agents*max_timesteps),nrow=n_agents,ncol=max_timesteps)
opinion_m[,0] <- pop$o
for(t in 1:max_timesteps) {
for(i in 1:encounters_per_t) {
#indexes <- sample(1:n_agents, 2)
#index1 <- indexes[1]
#index2 <- indexes[2]
index1 <- sample(1:n_agents, 1)
neighbor_list <- as.vector(neighbors(net,index1))
index2 <- sample(neighbor_list,1)
if( rbinom(1,1, pop[index1,]$r )) {
pop[index1,]$o <- pop[index2,]$o
}
# Do individuals interact with external entity?
for(i in 1:n_agents) {
if( rbinom(1,1,external_prob) ) {
if( rbinom(1,1,pop[i,]$r) ) {
pop[i,]$o <- external_opinion
}
opinion_m[,t] <- pop$o
}
return(list(opinion_m=opinion_m,pop=pop,net=net))
}
return_list <- opinion_dynamics()
opinion_m <- return_list$opinion_m
pop <- return_list$pop
net <- return_list$net
opinion_df <- data.frame(timestep=1:ncol(opinion_m),
proportion=colMeans(opinion_m))
opinion_df %>%
ggplot(aes(x=timestep,y=proportion) ) +
geom_line(size=2,color="steelblue") +
scale_y_continuous(limits=c(0,1)) +
theme_minimal()
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph() +
theme(legend.position = "none")
library(igraph)
library(tidyverse)
library(ggraph)
initialize_pop <- function(n_agents) {
pop <- data.frame(id = 1:n_agents,
o = sample(c(0,1),n_agents,replace=T),
r = runif(n_agents,0,1) ) #rbeta(5000,2,2)
return(pop)
}
seed_zealots <- function(n_zealots,zealot_opinion,n_agents,pop) {
zealot_indexes <- sample(1:n_agents,n_zealots)
pop[zealot_indexes,]$r <- 0
pop[zealot_indexes,]$o <- zealot_opinion
return(pop)
}
opinion_dynamics <- function(n_agents=100,
max_timesteps=1000,
encounters_per_t = n_agents,
mean_neighbors = 10,
n_zealots=15,
zealot_opinion=0,
external_opinion=1,
external_prob=0.1) {
pop <- initialize_pop(n_agents)
if(n_zealots > 0)
pop <- seed_zealots(n_zealots,zealot_opinion,n_agents,pop)
network_density <- mean_neighbors/n_agents
net <- erdos.renyi.game(n_agents,network_density)
#net <- make_lattice(length=sqrt(n_agents),dim=2,nei=1)
opinion_m <- matrix(data=rep(0,n_agents*max_timesteps),nrow=n_agents,ncol=max_timesteps)
opinion_m[,0] <- pop$o
for(t in 1:max_timesteps) {
for(i in 1:encounters_per_t) {
#indexes <- sample(1:n_agents, 2)
#index1 <- indexes[1]
#index2 <- indexes[2]
index1 <- sample(1:n_agents, 1)
neighbor_list <- as.vector(neighbors(net,index1))
index2 <- sample(neighbor_list,1)
if( rbinom(1,1, pop[index1,]$r )) {
pop[index1,]$o <- pop[index2,]$o
}
# Do individuals interact with external entity?
for(i in 1:n_agents) {
if( rbinom(1,1,external_prob) ) {
if( rbinom(1,1,pop[i,]$r) ) {
pop[i,]$o <- external_opinion
}
opinion_m[,t] <- pop$o
}
return(list(opinion_m=opinion_m,pop=pop,net=net))
}
return_list <- opinion_dynamics()
opinion_m <- return_list$opinion_m
pop <- return_list$pop
net <- return_list$net
opinion_df <- data.frame(timestep=1:ncol(opinion_m),
proportion=colMeans(opinion_m))
opinion_df %>%
ggplot(aes(x=timestep,y=proportion) ) +
geom_line(size=2,color="steelblue") +
scale_y_continuous(limits=c(0,1)) +
theme_minimal()
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph() +
theme(legend.position = "none")
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph()
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none")
+
theme(legend.position = "none")
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph() +
theme(legend.position = "none")
library(igraph)
library(tidyverse)
library(ggraph)
initialize_pop <- function(n_agents) {
pop <- data.frame(id = 1:n_agents,
o = sample(c(0,1),n_agents,replace=T),
r = runif(n_agents,0,1) ) #rbeta(5000,2,2)
return(pop)
}
seed_zealots <- function(n_zealots,zealot_opinion,n_agents,pop) {
zealot_indexes <- sample(1:n_agents,n_zealots)
pop[zealot_indexes,]$r <- 0
pop[zealot_indexes,]$o <- zealot_opinion
return(pop)
}
opinion_dynamics <- function(n_agents=100,
max_timesteps=500,
encounters_per_t = n_agents,
mean_neighbors = 10,
n_zealots=10,
zealot_opinion=0,
external_opinion=1,
external_prob=0.2) {
pop <- initialize_pop(n_agents)
if(n_zealots > 0)
pop <- seed_zealots(n_zealots,zealot_opinion,n_agents,pop)
network_density <- mean_neighbors/n_agents
net <- erdos.renyi.game(n_agents,network_density)
#net <- make_lattice(length=sqrt(n_agents),dim=2,nei=1)
opinion_m <- matrix(data=rep(0,n_agents*max_timesteps),nrow=n_agents,ncol=max_timesteps)
opinion_m[,0] <- pop$o
for(t in 1:max_timesteps) {
for(i in 1:encounters_per_t) {
#indexes <- sample(1:n_agents, 2)
#index1 <- indexes[1]
#index2 <- indexes[2]
index1 <- sample(1:n_agents, 1)
neighbor_list <- as.vector(neighbors(net,index1))
index2 <- sample(neighbor_list,1)
if( rbinom(1,1, pop[index1,]$r )) {
pop[index1,]$o <- pop[index2,]$o
}
# Do individuals interact with external entity?
for(i in 1:n_agents) {
if( rbinom(1,1,external_prob) ) {
if( rbinom(1,1,pop[i,]$r) ) {
pop[i,]$o <- external_opinion
}
opinion_m[,t] <- pop$o
}
return(list(opinion_m=opinion_m,pop=pop,net=net))
}
return_list <- opinion_dynamics()
opinion_m <- return_list$opinion_m
pop <- return_list$pop
net <- return_list$net
opinion_df <- data.frame(timestep=1:ncol(opinion_m),
proportion=colMeans(opinion_m))
opinion_df %>%
ggplot(aes(x=timestep,y=proportion) ) +
geom_line(size=2,color="steelblue") +
scale_y_continuous(limits=c(0,1)) +
theme_minimal()
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph() +
theme(legend.position = "none")
library(igraph)
library(tidyverse)
library(ggraph)
initialize_pop <- function(n_agents) {
pop <- data.frame(id = 1:n_agents,
o = sample(c(0,1),n_agents,replace=T),
r = runif(n_agents,0,1) ) #rbeta(5000,2,2)
return(pop)
}
seed_zealots <- function(n_zealots,zealot_opinion,n_agents,pop) {
zealot_indexes <- sample(1:n_agents,n_zealots)
pop[zealot_indexes,]$r <- 0
pop[zealot_indexes,]$o <- zealot_opinion
return(pop)
}
opinion_dynamics <- function(n_agents=100,
max_timesteps=500,
encounters_per_t = n_agents,
mean_neighbors = 10,
n_zealots=10,
zealot_opinion=0,
external_opinion=1,
external_prob=0.5) {
pop <- initialize_pop(n_agents)
if(n_zealots > 0)
pop <- seed_zealots(n_zealots,zealot_opinion,n_agents,pop)
network_density <- mean_neighbors/n_agents
net <- erdos.renyi.game(n_agents,network_density)
#net <- make_lattice(length=sqrt(n_agents),dim=2,nei=1)
opinion_m <- matrix(data=rep(0,n_agents*max_timesteps),nrow=n_agents,ncol=max_timesteps)
opinion_m[,0] <- pop$o
for(t in 1:max_timesteps) {
for(i in 1:encounters_per_t) {
#indexes <- sample(1:n_agents, 2)
#index1 <- indexes[1]
#index2 <- indexes[2]
index1 <- sample(1:n_agents, 1)
neighbor_list <- as.vector(neighbors(net,index1))
index2 <- sample(neighbor_list,1)
if( rbinom(1,1, pop[index1,]$r )) {
pop[index1,]$o <- pop[index2,]$o
}
# Do individuals interact with external entity?
for(i in 1:n_agents) {
if( rbinom(1,1,external_prob) ) {
if( rbinom(1,1,pop[i,]$r) ) {
pop[i,]$o <- external_opinion
}
opinion_m[,t] <- pop$o
}
return(list(opinion_m=opinion_m,pop=pop,net=net))
}
return_list <- opinion_dynamics()
opinion_m <- return_list$opinion_m
pop <- return_list$pop
net <- return_list$net
opinion_df <- data.frame(timestep=1:ncol(opinion_m),
proportion=colMeans(opinion_m))
opinion_df %>%
ggplot(aes(x=timestep,y=proportion) ) +
geom_line(size=2,color="steelblue") +
scale_y_continuous(limits=c(0,1)) +
theme_minimal()
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph() +
theme(legend.position = "none")
library(igraph)
library(tidyverse)
library(ggraph)
initialize_pop <- function(n_agents) {
pop <- data.frame(id = 1:n_agents,
o = sample(c(0,1),n_agents,replace=T),
r = runif(n_agents,0,1) ) #rbeta(5000,2,2)
return(pop)
}
seed_zealots <- function(n_zealots,zealot_opinion,n_agents,pop) {
zealot_indexes <- sample(1:n_agents,n_zealots)
pop[zealot_indexes,]$r <- 0
pop[zealot_indexes,]$o <- zealot_opinion
return(pop)
}
opinion_dynamics <- function(n_agents=100,
max_timesteps=500,
encounters_per_t = n_agents,
mean_neighbors = 10,
n_zealots=0,
zealot_opinion=0,
external_opinion=1,
external_prob=0.1) {
pop <- initialize_pop(n_agents)
if(n_zealots > 0)
pop <- seed_zealots(n_zealots,zealot_opinion,n_agents,pop)
network_density <- mean_neighbors/n_agents
net <- erdos.renyi.game(n_agents,network_density)
#net <- make_lattice(length=sqrt(n_agents),dim=2,nei=1)
opinion_m <- matrix(data=rep(0,n_agents*max_timesteps),nrow=n_agents,ncol=max_timesteps)
opinion_m[,0] <- pop$o
for(t in 1:max_timesteps) {
for(i in 1:encounters_per_t) {
#indexes <- sample(1:n_agents, 2)
#index1 <- indexes[1]
#index2 <- indexes[2]
index1 <- sample(1:n_agents, 1)
neighbor_list <- as.vector(neighbors(net,index1))
index2 <- sample(neighbor_list,1)
if( rbinom(1,1, pop[index1,]$r )) {
pop[index1,]$o <- pop[index2,]$o
}
# Do individuals interact with external entity?
for(i in 1:n_agents) {
if( rbinom(1,1,external_prob) ) {
if( rbinom(1,1,pop[i,]$r) ) {
pop[i,]$o <- external_opinion
}
opinion_m[,t] <- pop$o
}
return(list(opinion_m=opinion_m,pop=pop,net=net))
}
return_list <- opinion_dynamics()
opinion_m <- return_list$opinion_m
pop <- return_list$pop
net <- return_list$net
opinion_df <- data.frame(timestep=1:ncol(opinion_m),
proportion=colMeans(opinion_m))
opinion_df %>%
ggplot(aes(x=timestep,y=proportion) ) +
geom_line(size=2,color="steelblue") +
scale_y_continuous(limits=c(0,1)) +
theme_minimal()
ggraph(net,"stress")+
geom_edge_link(edge_colour = "grey66", edge_width = 0.5) +
geom_node_point(aes(fill = factor(pop$o,levels=c(0,1)) ), shape = ifelse(pop$r == 0,24,21), size = 3) +
scale_fill_manual(values=c("steelblue","orange3")) +
scale_size(range=c(2,5), guide = "none") +
theme_graph() +
theme(legend.position = "none")
library(tidyverse)
library(dplyr)
library(rstan)
library(rethinking)
library(igraph)
library(dagitty)
library(cmdstanr)
# set seed
set.seed(12345)
################ Create simulated data set ################
### Population
# 120 individuals: 50 male (10 each of ages 3-7), 50 female (10 each of ages 3-7), 20 unknown (10 each of ages 1-2)
# males no preference for any other individual -- edge weight 0.2
# females in 8 cliques -- edge weight 0.8, otherwise 0.2
# unknowns attached to a single female -- edge weight 0.95
# assign females to family units
cliques_F <- sample(1:8,50,replace=T)
table(cliques_F)
# create data frame of all individuals
population <- data.frame(id = rep(NA,120),
num = c(1:50,1:50,1:20),
sex = c(rep('M',50), rep('F',50), rep('U',20)),
age = c(rep(c(3:7), each = 10), rep(c(3:7), each = 10), rep(c(1:2), each = 10)),
clique = c(rep(NA, 50), cliques_F, rep(NA, 20)))
population$id <- paste(population$sex, population$num, sep = '')
# randomly assign calves to females
mothers <- data.frame(id = population$id[101:120],
family = sample(population$id[61:100], replace = F, size = 20))
mothers
population <- left_join(x = population, y = mothers, by = 'id')
# need a clique for U elephants and a family for F elephants
females <- population[population$sex == 'F', c(1,5,6)]
unknown <- population[population$sex == 'U', c(1,5,6)]
females$mother <- females$id ; unknown$mother <- unknown$family   # create variable to join by
families <- left_join(x = unknown, y = females, by = 'mother')    # join to give unknowns a clique
unknown <- families[,c(1,4,6)]
families <- left_join(x = females, y = unknown, by = 'mother')    # join to give mothers their calf
females <- families[,c(1,5,2)]
colnames(unknown) <- c('id','mother','clique')
colnames(females) <- c('id','mother','clique')
families <- rbind(females, unknown)                               # put mother and calf data into a single data frame
# join to combine male and female/unknown data together
population <- left_join(x = population, y = families, by = 'id')
population <- population[,c(1,3,4,7,8)]
colnames(population)[c(4,5)] <- c('family','clique')
### Create dyadic data frame
dyads <- data.frame(id_1 = rep(population$id, each = 120), id_2 = rep(population$id, 120))               # create new data frame of all dyads
dyads$same <- ifelse(dyads$id_1 == dyads$id_2, 'yes', 'no') ; dyads <- dyads[dyads$same == 'no', c(1,2)] # remove self-dyads (e.g. M1-M1)
dyads$node_1 <- as.integer(as.factor(dyads$id_1)) ; dyads$node_2 <- as.integer(as.factor(dyads$id_2))    # create factor of  <-
dyads$dyad <- ifelse(dyads$node_1 < dyads$node_2,                               # create variable of dyads
paste(dyads$id_1, dyads$id_2, sep = '_'),
paste(dyads$id_2, dyads$id_1, sep = '_'))
dyads <- data.frame(dyad = unique(dyads$dyad))                                  # create new data frame of only unique dyads
dyads <- separate(dyads, col = dyad, into = c('id_1','id_2'), remove = FALSE)   # nodes columns
dyads$node_1 <- as.integer(as.factor(dyads$id_1))                               # nodes columns
dyads$node_2 <- as.integer(as.factor(dyads$id_2))                               # nodes columns
dyads$dyad_id <- as.integer(as.factor(dyads$dyad))                              # dyad index variable
population$id_1 <- population$id ; population$id_2 <- population$id  # variable to join information on each individual
dyads <- left_join(x = dyads, y = population, by = 'id_1')           # add information about node 1
dyads <- dyads[,c(1:6,8:11)]
colnames(dyads)[c(3,7:10)] <- c('id_2','sex_1','age_1','family_1','clique_1')
dyads <- left_join(x = dyads, y = population, by = 'id_2')           # add information about node 2
dyads <- dyads[,c(1:10,12:15)]
colnames(dyads)[c(2,11:14)] <- c('id_1','sex_2','age_2','family_2','clique_2')
dyads <- dyads[,c(1:7,11,8,12,9,13,10,14)]
### Assign type of dyad
dyads$pair_type <- ifelse(is.na(dyads$clique_1) | is.na(dyads$clique_2), 'no_group',
ifelse(dyads$clique_1 == dyads$clique_2,
ifelse(is.na(dyads$family_1) | is.na(dyads$family_2), 'group',
ifelse(dyads$family_1 == dyads$id_2 | dyads$family_2 == dyads$id_1,
'family', 'group')),
'no_group'))
### Assign edge weight to dyad pairs
for(i in 1:nrow(dyads)){
if(dyads$pair_type[i] == 'family')  {dyads$edge[i] <- rethinking::rbeta2(1,0.95,50)   # mother-calf: edge weight around 0.95
} else
if(dyads$pair_type[i] == 'group') {dyads$edge[i] <- rethinking::rbeta2(1,0.8,50)    # same family, not mother-calf: edge ~ 0.8
} else
dyads$edge[i] <- rethinking::rbeta2(1,0.20,50)                                        # different family: edge weight around 0.2
}
summary(dyads$edge)
boxplot(dyads$edge ~ dyads$pair_type)                                                   # check simulations are around what I expected
points(y = dyads$edge, x = rep(2, length(which(dyads$pair_type == 'group'))),           # had a few problems with this one, but looks good now
col = col.alpha('black',0.2), pch = 19)
### clean up environment
rm(families, females, mothers, unknown, cliques_F)
### Sample observations
N <- 20
dyads$event_count <- rbinom(nrow(dyads), N, prob = dyads$edge)
### plot simulated observations against assigned edge weight to check model input is correlates to true value
plot(event_count ~ edge, data = dyads,
las = 1, ylab = 'sightings together', xlab = 'assigned edge weight',
pch = 16, col = col.alpha(rangi2, 0.2))
### add additional columns (dyadic sex, age and dem_class)
head(dyads)
# assign each node to age category (adult, pubescent, juvenile or calf) from age class
dyads$age_cat_1 <- ifelse(dyads$age_1 == 1, 'C', ifelse(dyads$age_1 == 2, 'J', ifelse(dyads$age_1 < 5, 'P', 'A')))
dyads$age_cat_2 <- ifelse(dyads$age_2 == 1, 'C', ifelse(dyads$age_2 == 2, 'J', ifelse(dyads$age_2 < 5, 'P', 'A')))
# combine age categories into single variable for dyad
dyads$age_dyad <- ifelse(dyads$age_cat_1 == 'A',
ifelse(dyads$age_cat_2 == 'A', 'A_A',
ifelse(dyads$age_cat_2 == 'P', 'A_P',
ifelse(dyads$age_cat_2 == 'J', 'A_J', 'A_C'))),
ifelse(dyads$age_cat_1 == 'P',
ifelse(dyads$age_cat_2 == 'A', 'A_P',
ifelse(dyads$age_cat_2 == 'P', 'P_P',
ifelse(dyads$age_cat_2 == 'J', 'P_J', 'P_C'))),
ifelse(dyads$age_cat_1 == 'J',
ifelse(dyads$age_cat_2 == 'A', 'A_J',
ifelse(dyads$age_cat_2 == 'P', 'P_J',
ifelse(dyads$age_cat_2 == 'J', 'J_J', 'J_C'))),
ifelse(dyads$age_cat_2 == 'A', 'A_C',
ifelse(dyads$age_cat_2 == 'P', 'P_C',
ifelse(dyads$age_cat_2 == 'J', 'J_C', 'C_C'))))))
unique(dyads$age_dyad) # "P_P" "A_P" "P_C" "P_J" "A_A" "A_C" "A_J" "C_C" "J_C" "J_J"
dyads$age_diff <- abs(dyads$age_1 - dyads$age_2)
# create composite measure of demography per node (e.g. AM = adult male, CU = calf of unknown sex)
dyads$dem_class_1 <- paste(dyads$age_cat_1, dyads$sex_1, sep = '')
dyads$dem_class_2 <- paste(dyads$age_cat_2, dyads$sex_2, sep = '')
# combine demographies into single variable for dyad
dyads$demf_1 <- as.integer(as.factor(dyads$dem_class_1)) ; dyads$demf_2 <- as.integer(as.factor(dyads$dem_class_2))
dyads$dem_dyad <- ifelse(dyads$demf_1 < dyads$demf_2,
paste(dyads$dem_class_1, dyads$dem_class_2, sep = '_'),
paste(dyads$dem_class_2, dyads$dem_class_1, sep = '_'))
dyads$dem_dyad <- ifelse(dyads$dem_dyad == 'CU_JU', 'JU_CU',           # standardise dem_dyad so always in same order
ifelse(dyads$dem_dyad == 'CU_PF', 'PF_CU',
ifelse(dyads$dem_dyad == 'CU_PM','PM_CU',
ifelse(dyads$dem_dyad == 'JU_PF','PF_JU',
ifelse(dyads$dem_dyad == 'JU_PM','PM_JU',dyads$dem_dyad)))))
dyads$dem_dyad_f <- as.integer(as.factor(dyads$dem_dyad))              # make index variable
dyads$dem_diff <- ifelse(dyads$dem_class_1 == dyads$dem_class_2, 0, 1) # binary: same or different
dyads$sex_dyad <- paste(dyads$sex_1, dyads$sex_2, sep = '_')           # composite sex variable for dyad
dyads$sex_diff <- ifelse(dyads$sex_1 == dyads$sex_2, 0, 1)             # binary: same or different
dyads <- dyads[,c(1:23,26:30)]                                         # remove demf variables -- not needed
# together vs apart per dyad
summary(dyads$event_count)             # together, all out of 20
dyads$apart <- N - dyads$event_count   # apart = 20-together
dyads
save_csv
write_csv(dyads, "aim_elephant_dyads.csv")
write_csv(dyads, "sim_elephant_dyads.csv")
setwd("/Volumes/GoogleDrive/My Drive/code/Elephant_Alert_dyadic_regression")
library(tidyverse)
#library(rstan)
#library(rethinking)
library(igraph)
library(cmdstanr)
setwd("/Volumes/GoogleDrive/My Drive/code/Elephant_Alert_dyadic_regression")
dyads <- read_csv(sim_elephant_dyads.csv)
dyads <- read_csv("sim_elephant_dyads.csv")
spec(dyads)
### create data list for use in STAN -- can contain no NA values in any column, even if column is not specified in model
dyads_ls <- list(
n_dyads  = nrow(dyads),         # total number of times one or other of the dyad was observed
together = dyads$event_count, # count number of sightings seen together
apart    = dyads$apart,       # count number of sightings seen apart
age_diff = dyads$age_diff)      # age difference between individuals
dyads_ls
head(dyads)
